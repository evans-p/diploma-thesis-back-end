/**
 */
package blockModelingMetamodel.provider;

import blockModelingMetamodel.util.BlockModelingMetamodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BlockModelingMetamodelItemProviderAdapterFactory extends BlockModelingMetamodelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BlockModelingMetamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.BlockApp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockAppItemProvider blockAppItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.BlockApp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAppAdapter() {
		if (blockAppItemProvider == null) {
			blockAppItemProvider = new BlockAppItemProvider(this);
		}

		return blockAppItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ReferenceBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceBlockItemProvider referenceBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ReferenceBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceBlockAdapter() {
		if (referenceBlockItemProvider == null) {
			referenceBlockItemProvider = new ReferenceBlockItemProvider(this);
		}

		return referenceBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.Information} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationItemProvider informationItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.Information}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationAdapter() {
		if (informationItemProvider == null) {
			informationItemProvider = new InformationItemProvider(this);
		}

		return informationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.DecisionBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionBlockItemProvider decisionBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.DecisionBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionBlockAdapter() {
		if (decisionBlockItemProvider == null) {
			decisionBlockItemProvider = new DecisionBlockItemProvider(this);
		}

		return decisionBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ActionBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionBlockItemProvider actionBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ActionBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionBlockAdapter() {
		if (actionBlockItemProvider == null) {
			actionBlockItemProvider = new ActionBlockItemProvider(this);
		}

		return actionBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.SelectInputBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectInputBlockItemProvider selectInputBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.SelectInputBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectInputBlockAdapter() {
		if (selectInputBlockItemProvider == null) {
			selectInputBlockItemProvider = new SelectInputBlockItemProvider(this);
		}

		return selectInputBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.TextInputBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextInputBlockItemProvider textInputBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.TextInputBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextInputBlockAdapter() {
		if (textInputBlockItemProvider == null) {
			textInputBlockItemProvider = new TextInputBlockItemProvider(this);
		}

		return textInputBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.IntegerInputBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerInputBlockItemProvider integerInputBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.IntegerInputBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerInputBlockAdapter() {
		if (integerInputBlockItemProvider == null) {
			integerInputBlockItemProvider = new IntegerInputBlockItemProvider(this);
		}

		return integerInputBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.FloatInputBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatInputBlockItemProvider floatInputBlockItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.FloatInputBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatInputBlockAdapter() {
		if (floatInputBlockItemProvider == null) {
			floatInputBlockItemProvider = new FloatInputBlockItemProvider(this);
		}

		return floatInputBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ConfigurationPopover} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationPopoverItemProvider configurationPopoverItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ConfigurationPopover}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationPopoverAdapter() {
		if (configurationPopoverItemProvider == null) {
			configurationPopoverItemProvider = new ConfigurationPopoverItemProvider(this);
		}

		return configurationPopoverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.SettingsPopover} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettingsPopoverItemProvider settingsPopoverItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.SettingsPopover}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettingsPopoverAdapter() {
		if (settingsPopoverItemProvider == null) {
			settingsPopoverItemProvider = new SettingsPopoverItemProvider(this);
		}

		return settingsPopoverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.PhrasesInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhrasesInputFormItemProvider phrasesInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.PhrasesInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhrasesInputFormAdapter() {
		if (phrasesInputFormItemProvider == null) {
			phrasesInputFormItemProvider = new PhrasesInputFormItemProvider(this);
		}

		return phrasesInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.LabeledTextInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabeledTextInputFormItemProvider labeledTextInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.LabeledTextInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabeledTextInputFormAdapter() {
		if (labeledTextInputFormItemProvider == null) {
			labeledTextInputFormItemProvider = new LabeledTextInputFormItemProvider(this);
		}

		return labeledTextInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.LabeledIntegerInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabeledIntegerInputFormItemProvider labeledIntegerInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.LabeledIntegerInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabeledIntegerInputFormAdapter() {
		if (labeledIntegerInputFormItemProvider == null) {
			labeledIntegerInputFormItemProvider = new LabeledIntegerInputFormItemProvider(this);
		}

		return labeledIntegerInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.LabeledFloatInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabeledFloatInputFormItemProvider labeledFloatInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.LabeledFloatInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabeledFloatInputFormAdapter() {
		if (labeledFloatInputFormItemProvider == null) {
			labeledFloatInputFormItemProvider = new LabeledFloatInputFormItemProvider(this);
		}

		return labeledFloatInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ParameterInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterInputFormItemProvider parameterInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ParameterInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterInputFormAdapter() {
		if (parameterInputFormItemProvider == null) {
			parameterInputFormItemProvider = new ParameterInputFormItemProvider(this);
		}

		return parameterInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ConditionInputForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionInputFormItemProvider conditionInputFormItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ConditionInputForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionInputFormAdapter() {
		if (conditionInputFormItemProvider == null) {
			conditionInputFormItemProvider = new ConditionInputFormItemProvider(this);
		}

		return conditionInputFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockModelingMetamodel.ConditionOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionOptionItemProvider conditionOptionItemProvider;

	/**
	 * This creates an adapter for a {@link blockModelingMetamodel.ConditionOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionOptionAdapter() {
		if (conditionOptionItemProvider == null) {
			conditionOptionItemProvider = new ConditionOptionItemProvider(this);
		}

		return conditionOptionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (blockAppItemProvider != null)
			blockAppItemProvider.dispose();
		if (referenceBlockItemProvider != null)
			referenceBlockItemProvider.dispose();
		if (informationItemProvider != null)
			informationItemProvider.dispose();
		if (decisionBlockItemProvider != null)
			decisionBlockItemProvider.dispose();
		if (actionBlockItemProvider != null)
			actionBlockItemProvider.dispose();
		if (selectInputBlockItemProvider != null)
			selectInputBlockItemProvider.dispose();
		if (textInputBlockItemProvider != null)
			textInputBlockItemProvider.dispose();
		if (integerInputBlockItemProvider != null)
			integerInputBlockItemProvider.dispose();
		if (floatInputBlockItemProvider != null)
			floatInputBlockItemProvider.dispose();
		if (configurationPopoverItemProvider != null)
			configurationPopoverItemProvider.dispose();
		if (settingsPopoverItemProvider != null)
			settingsPopoverItemProvider.dispose();
		if (phrasesInputFormItemProvider != null)
			phrasesInputFormItemProvider.dispose();
		if (labeledTextInputFormItemProvider != null)
			labeledTextInputFormItemProvider.dispose();
		if (labeledIntegerInputFormItemProvider != null)
			labeledIntegerInputFormItemProvider.dispose();
		if (labeledFloatInputFormItemProvider != null)
			labeledFloatInputFormItemProvider.dispose();
		if (parameterInputFormItemProvider != null)
			parameterInputFormItemProvider.dispose();
		if (conditionInputFormItemProvider != null)
			conditionInputFormItemProvider.dispose();
		if (optionItemProvider != null)
			optionItemProvider.dispose();
		if (conditionOptionItemProvider != null)
			conditionOptionItemProvider.dispose();
	}

}
