import React, {Component} from 'react';
import '../css/FormStyling.css';
import {Tooltip, Position} from '@blueprintjs/core';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faInfoCircle} from '@fortawesome/free-solid-svg-icons';
import i18n from '../../i18n';

import blockImg from "../../../../assets/mde/generated_blocks/actionBlockImage.png";


const TooltipComponent = (textEL, textEN) => (
  <div
    style={{
      maxWidth: "200",
      maxHeight: "200",
      overflow: "auto",
      overflowWrap: "break-all",
      paddingRight: "5",
    }}
  >
    {i18n.language == "en" || i18n.language !== "en-US" ? textEN : textEL}
  </div>
);

class Action extends Component{

	static defaultProps = {
	}

    constructor(props) {
        super(props);
        this.state = {

			// generic properties for all blocks
            blockErrors: props.blockErrors || [],
            blockWarnings: props.blockWarnings || [],
            errorsIcon: require('../../../../assets/mde/commands/Error-Warning.png'),
            errorsDisplay: 'none',

			// specific block properties. Generated by Acceleo
       	};

        this.appHasChanged = props.appHasChanged;

        this.getComponentData = this.getComponentData.bind(this);
		this.handleOnChange = this.handleOnChange.bind(this);
	}


	 handleOnChange(e) {
	    this.setState({[e.target.name]: e.target.value});
		this.appHasChanged();
	}

   getComponentData() {
        const data = [];


        return data;
    }

    componentDidUpdate(prevProps) {
        const {blockErrors, blockWarnings} = this.props;
        if ((prevProps.blockErrors !== blockErrors) || (prevProps.blockWarnings !== blockWarnings)) {
            let display;
            let icon;
            if ((blockErrors.length !== 0) && (blockWarnings.length !== 0)) {
                display = 'block';
                icon = require('../../../../assets/mde/commands/Error-Warning.png');
            } else if (blockErrors.length !== 0) {
                display = 'block';
                icon = require('../../../../assets/mde/commands/Error.png');
            } else if (blockWarnings.length !== 0) {
                display = 'block';
                icon = require('../../../../assets/mde/commands/Warning.png');
            } else {
                display = 'none';
                icon = require('../../../../assets/mde/commands/Error-Warning.png');
            }

            this.setState({blockErrors, blockWarnings, errorsIcon: icon, errorsDisplay: display});
        }
    }

	render(){
        const {blockErrors, blockWarnings, errorsDisplay, errorsIcon} = this.state;

        const errorTooltipContent = (
            <div style={{
                maxWidth: '200', maxHeight: '200', overflow: 'auto', overflowWrap: 'break-all', paddingRight: '5'
            }}
            >
                {blockErrors.map(error => (
                    <li key={Math.random()}>{error}</li>
                ))}
                {blockWarnings.map(warning => (
                    <li key={Math.random()}>{warning}</li>
                ))}
            </div>
        );
		return(
			<div>
				<strong>
				</strong>
				<div style={{
		            width: '180.5', height: '52.5', position: 'absolute', left: '0', top: '0'
		        }}>
					<img src={blockImg} style={{width: '45', height: 'auto', position: 'absolute', left: '20', top: '3.75'}}/>
				</div>
				<label style={{
		            width: '180.5', height: '20', position: 'absolute', left: '0', top: '52.5', fontSize: '10'
		        }}>
					{i18n.language == "en" || i18n.language !== "en-US" ? "Testing Action Block" : "Δοκιμαστικό Μπλοκ Δράσης"}
				</label>
		        <div style={{
		            width: '70', height: '25', position: 'absolute', right: '20', top: '18', display: 'flex', justifyContent: 'space-evenly'
		        }}
		        >
		            <Tooltip interactionKind="hover" content={errorTooltipContent} position={Position.RIGHT_TOP}>
		                <img
		                    src={errorsIcon}
		                    alt="Error"
		                    style={{display: errorsDisplay, width: '25', height: '100%', cursor: 'help'}}
		                />
		            </Tooltip>
		            <Tooltip interactionKind="hover" content={TooltipComponent("123", "123")} position={Position.RIGHT_TOP}>
		                <FontAwesomeIcon icon={faInfoCircle} style={{color: 'rgba(255, 255, 255, 0.75)', width: '25', height: '100%', cursor: 'help'}} />
		            </Tooltip>
		        </div>
			</div>
		);
	}
}

export default Action;

